1. What are the fundamental concepts of version control, and why is GitHub a popular tool for managing versions of code? How does version control help in maintaining project integrity?
Answer: Version control is a system that tracks changes to files over time, allowing developers to manage modifications efficiently. It helps with:
•	Tracking Changes: Maintains a history of updates, enabling rollback if needed.
•	Collaboration: Allows multiple developers to work on the same project without conflicts.
•	Branching & Merging: Supports parallel development and seamless integration.
GitHub is popular because it provides:
•	Cloud-based storage for accessibility from anywhere.
•	Collaboration tools like pull requests and issue tracking.
•	Integration with CI/CD pipelines, DevOps tools, and project management platforms.
Version control ensures data consistency, prevents loss, and enables effective debugging.

2. How do you set up a new repository on GitHub? What are the key steps involved, and what important decisions need to be made?
Answer: Steps to set up a GitHub repository:
1.	Sign in to GitHub and navigate to "New Repository."
2.	Choose a repository name and description.
3.	Select Visibility: Public (open to everyone) or Private (restricted access).
4.	Initialize with a README: Helps explain the project.
5.	Add a .gitignore file (optional): Excludes unnecessary files.
6.	Choose a License (optional): Defines how others can use the code.
Important decisions: Repository visibility, licensing, and initial setup options.

3. Why is the README file important in a GitHub repository? What should be included in a well-written README?
Answer: The README file serves as the project's introduction and documentation. It should include:
•	Project Overview: Purpose and goals.
•	Installation Instructions: Steps to set up the project.
•	Usage Guide: How to use the software.
•	Contribution Guidelines: Rules for contributing.
•	License Information: Defines usage rights.
A well-structured README improves collaboration by helping contributors understand the project.

4. What are the differences between a public repository and a private repository on GitHub?
Answer:


Feature	Public Repository	Private Repository
Visibility	Accessible to everyone	Restricted to selected users
Collaboration	Open-source projects thrive	Suitable for proprietary projects
Security	Less control over access	More controlled access
Use Case	Open-source projects, portfolio work	Confidential or commercial projects
			
Trade-offs: Public repos allow wider contributions, while private repos offer security and controlled collaboration.

5. How do you make your first commit to a GitHub repository? What are commits, and how do they help in version control?
Answer: A commit records changes in the repository. Steps for the first commit:
1.	Clone the repository (if not local):
git clone <repository-url>
2.	Navigate into the repository:
cd repository-name
3.	Create or modify files.
4.	Stage changes:
git add .
5.	Commit the changes:
git commit -m "Initial commit"
6.	Push to GitHub:
git push origin main
Importance of commits: They track progress and enable version control.

6. How does branching work in Git, and why is it important for collaboration?
Answer: Branching allows multiple developers to work on different features simultaneously.
Process:
•	Create a branch:
git branch feature-branch
•	Switch to the branch:
git checkout feature-branch
•	Make changes & commit.
•	Merge back into main:
•	git checkout main
git merge feature-branch
Why it's important? Prevents conflicts and keeps the main branch stable.

7. What is a pull request, and how does it facilitate collaboration?
Answer: A pull request (PR) is a request to merge code changes from one branch to another.
Steps to create a pull request:
1.	Push changes to GitHub.
2.	Open a PR in the GitHub UI.
3.	Request reviews from team members.
4.	Discuss and refine the code.
5.	Merge after approval.
Importance: PRs enable review, prevent errors, and encourage collaboration.

8. What is "forking" a repository on GitHub, and how does it differ from cloning?
Answer:
Feature	Forking	Cloning
Definition	Creates an independent copy of a repository	Creates a local copy of a repository
Use Case	Contributing to external projects	Working on a local version of a repo
Changes	Does not affect the original repo	Can push changes if permissions exist

Forking is useful for contributing to open-source projects without affecting the original repository.

9. How can GitHub Issues and Project Boards help with project management?
Answer: GitHub Issues help track:
•	Bugs
•	Feature requests
•	Documentation improvements
Project Boards organize tasks using Kanban-style management, useful for Agile workflows.
Example:
•	To Do: Identify tasks.
•	In Progress: Track active work.
•	Done: Completed tasks.
These tools improve collaboration, transparency, and task tracking in software projects.

10. What are common challenges and best practices when using GitHub for version control?
Answer: Common Challenges:
•	Merge conflicts
•	Accidental commits to main
•	Managing large repositories

